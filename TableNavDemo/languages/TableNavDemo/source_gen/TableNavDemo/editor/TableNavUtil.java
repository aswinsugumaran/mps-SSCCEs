package TableNavDemo.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.actions.CursorPositionTracker;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import de.slisson.mps.tables.runtime.cells.TableTraversalUtil;
import jetbrains.mps.openapi.editor.cells.CellConditions;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.lang.reflect.Field;
import java.util.HashMap;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.nodeEditor.NodeEditorActions;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.openapi.editor.selection.SingularSelection;
import jetbrains.mps.nodeEditor.selection.NodeRangeSelection;

public class TableNavUtil {

  private static CursorPositionTracker cursorPositionTracker = null;

  public static boolean canMoveUp(EditorContext editorContext, SNode node) {
    EditorCell editorCellSelected = getDeepestSelectedCell(editorContext);
    return editorCellSelected != null && TableTraversalUtil.getUpper(editorCellSelected, CellConditions.SELECTABLE, editorCellSelected.getCaretX()) != null;
  }

  public static boolean canMoveDown(EditorContext editorContext, SNode node) {
    EditorCell editorCellSelected = getDeepestSelectedCell(editorContext);
    return editorCellSelected != null && TableTraversalUtil.getLower(editorCellSelected, CellConditions.SELECTABLE, editorCellSelected.getCaretX()) != null;
  }

  public static boolean canMovePrev(EditorContext editorContext, SNode node) {
    EditorCell selection = ((EditorComponent) editorContext.getEditorComponent()).getSelectedCell();
    return selection != null && TableTraversalUtil.getPrevLeaf(selection, CellConditions.SELECTABLE) != null;
  }

  public static boolean canMoveNext(EditorContext editorContext, SNode node) {
    EditorCell selection = ((EditorComponent) editorContext.getEditorComponent()).getSelectedCell();
    return selection != null && TableTraversalUtil.getNextLeaf(selection, CellConditions.SELECTABLE) != null;
  }

  public static void moveUp(EditorContext editorContext) {
    if (cursorPositionTracker == null) {
      cursorPositionTracker = getPositionTracker(editorContext.getEditorComponent());
    }
    EditorCell selectedCell = getDeepestSelectedCell(editorContext);
    int caretX = (cursorPositionTracker.hasPosition() ? cursorPositionTracker.getPosition() : selectedCell.getCaretX());
    EditorCell target = TableTraversalUtil.getUpper(selectedCell, CellConditions.SELECTABLE, caretX);
    target.setCaretX(caretX);
    editorContext.getEditorComponent().changeSelection(target);
    cursorPositionTracker.savePosition(caretX);
  }

  public static void moveDown(EditorContext editorContext) {
    if (cursorPositionTracker == null) {
      cursorPositionTracker = getPositionTracker(editorContext.getEditorComponent());
    }
    EditorCell selectedCell = getDeepestSelectedCell(editorContext);
    int caretX = (cursorPositionTracker.hasPosition() ? cursorPositionTracker.getPosition() : selectedCell.getCaretX());
    EditorCell target = TableTraversalUtil.getLower(selectedCell, CellConditions.SELECTABLE, caretX);
    target.setCaretX(caretX);
    editorContext.getEditorComponent().changeSelection(target);
    cursorPositionTracker.savePosition(caretX);
  }

  public static void movePrev(EditorContext editorContext) {
    EditorComponent editorComponent = (EditorComponent) editorContext.getEditorComponent();
    EditorCell selection = editorComponent.getSelectedCell();
    editorComponent.changeSelection(TableTraversalUtil.getPrevLeaf(selection, CellConditions.SELECTABLE));
  }

  public static void moveNext(EditorContext editorContext) {
    EditorComponent editorComponent = (EditorComponent) editorContext.getEditorComponent();
    EditorCell selection = editorComponent.getSelectedCell();
    editorComponent.changeSelection(TableTraversalUtil.getNextLeaf(selection, CellConditions.SELECTABLE));
  }

  private static CursorPositionTracker getPositionTracker(jetbrains.mps.openapi.editor.EditorComponent editorComponent) {
    try {
      Field actionMapField = EditorComponent.class.getDeclaredField("myActionMap");
      actionMapField.setAccessible(true);
      HashMap<CellActionType, CellAction> actionMap = (HashMap<CellActionType, CellAction>) actionMapField.get(editorComponent);
      Field field = NodeEditorActions.MoveDown.class.getDeclaredField("myPositionTracker");
      field.setAccessible(true);
      CursorPositionTracker tracker = (CursorPositionTracker) field.get(actionMap.get(CellActionType.DOWN));
      return tracker;
    } catch (Exception ex) {
      throw new RuntimeException(ex);
    }
  }

  private static EditorCell getDeepestSelectedCell(EditorContext context) {
    Selection deepestSelection = context.getSelectionManager().getDeepestSelection();
    if (deepestSelection instanceof SingularSelection) {
      return ((SingularSelection) deepestSelection).getEditorCell();
    } else
    if (deepestSelection instanceof NodeRangeSelection) {
      return ((NodeRangeSelection) deepestSelection).getLastCell();
    }
    return null;
  }

}
